// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoeEcommerce.Data;

namespace ShoeEcommerce.Data.Migrations
{
    [DbContext(typeof(ShoeEcommerceDBContext))]
    [Migration("20181120164124_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Accounts", b =>
                {
                    b.Property<string>("IdAccount")
                        .HasColumnName("idAccount")
                        .HasMaxLength(10);

                    b.Property<string>("AvtPath")
                        .IsRequired()
                        .HasColumnName("avt_path");

                    b.Property<string>("IdCustomer")
                        .IsRequired()
                        .HasColumnName("idCustomer")
                        .HasMaxLength(10);

                    b.Property<string>("IdMerchant")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Passwd")
                        .IsRequired()
                        .HasColumnName("passwd")
                        .HasMaxLength(30);

                    b.Property<int>("RankVip")
                        .HasColumnName("rankVip");

                    b.Property<int>("Rate")
                        .HasColumnName("rate");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasMaxLength(30);

                    b.HasKey("IdAccount");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdMerchant");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Addresses", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id");

                    b.Property<string>("AddInfo")
                        .IsRequired()
                        .HasColumnName("add_Info")
                        .HasMaxLength(100);

                    b.Property<string>("Addressid");

                    b.Property<string>("CityProvine")
                        .IsRequired()
                        .HasColumnName("City_Provine")
                        .HasMaxLength(20);

                    b.Property<string>("DistrictTown")
                        .IsRequired()
                        .HasColumnName("District_town")
                        .HasMaxLength(20);

                    b.Property<string>("IdAccount")
                        .IsRequired()
                        .HasColumnName("idAccount")
                        .HasMaxLength(10);

                    b.Property<string>("SubDistrict")
                        .IsRequired()
                        .HasColumnName("subDistrict")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Addressid");

                    b.HasIndex("IdAccount");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Advertisements", b =>
                {
                    b.Property<string>("IdAdvertisement")
                        .HasColumnName("idAdvertisement")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnName("creat_date");

                    b.Property<int>("Expire")
                        .HasColumnName("expire");

                    b.Property<string>("IdAccount")
                        .IsRequired()
                        .HasColumnName("idAccount")
                        .HasMaxLength(10);

                    b.Property<int>("Position")
                        .HasColumnName("position");

                    b.Property<int?>("PositionidPosition");

                    b.HasKey("IdAdvertisement");

                    b.HasIndex("IdAccount");

                    b.HasIndex("PositionidPosition");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.BillStates", b =>
                {
                    b.Property<int>("IdState")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idState")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("IdState");

                    b.ToTable("BillStates");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Categories", b =>
                {
                    b.Property<string>("IdCategory")
                        .HasColumnName("idCategory")
                        .HasMaxLength(10);

                    b.Property<string>("LinkImageCategory")
                        .HasColumnName("link_imageCategory");

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasColumnName("nameCategory");

                    b.HasKey("IdCategory");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Customers", b =>
                {
                    b.Property<string>("IdCustomer")
                        .HasColumnName("idCustomer")
                        .HasMaxLength(10);

                    b.Property<string>("Fstname")
                        .IsRequired()
                        .HasColumnName("fstname")
                        .HasMaxLength(50);

                    b.Property<string>("Lstname")
                        .IsRequired()
                        .HasColumnName("lstname")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone");

                    b.HasKey("IdCustomer");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Emails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(10);

                    b.Property<string>("Addressid");

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<string>("IdAccount")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("Addressid");

                    b.HasIndex("IdAccount");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.ExportForms", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnName("creat_date");

                    b.Property<string>("IdRepository")
                        .IsRequired()
                        .HasColumnName("idRepository")
                        .HasMaxLength(10);

                    b.Property<double>("Total")
                        .HasColumnName("total");

                    b.HasKey("Id");

                    b.HasIndex("IdRepository");

                    b.ToTable("ExportForms");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.HistorySearches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountidAccount")
                        .HasMaxLength(10);

                    b.Property<string>("IdAcc")
                        .IsRequired()
                        .HasColumnName("idAcc")
                        .HasMaxLength(10);

                    b.Property<string>("Keyword")
                        .HasColumnName("keyword");

                    b.HasKey("Id");

                    b.HasIndex("AccountidAccount");

                    b.ToTable("HistorySearches");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.ImageProducts", b =>
                {
                    b.Property<string>("IdImage")
                        .HasColumnName("idImage")
                        .HasMaxLength(10);

                    b.Property<int>("IdproductDetail")
                        .HasColumnName("idproductDetail");

                    b.Property<string>("LinkImage")
                        .HasColumnName("link_Image")
                        .HasMaxLength(40);

                    b.Property<string>("ProductDetailidproductDetail")
                        .HasColumnName("productDetailidproductDetail")
                        .HasMaxLength(10);

                    b.HasKey("IdImage");

                    b.HasIndex("ProductDetailidproductDetail");

                    b.ToTable("ImageProducts");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.ImportForms", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatDate")
                        .HasColumnName("creat_date");

                    b.Property<string>("IdRepository")
                        .IsRequired()
                        .HasColumnName("idRepository")
                        .HasMaxLength(10);

                    b.Property<double>("Total")
                        .HasColumnName("total");

                    b.HasKey("Id");

                    b.HasIndex("IdRepository");

                    b.ToTable("ImportForms");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.ItemEplists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnName("count");

                    b.Property<string>("ExportFormid")
                        .HasMaxLength(10);

                    b.Property<int>("IdEpform")
                        .HasColumnName("idEpform");

                    b.Property<int>("IdProduct")
                        .HasColumnName("idProduct");

                    b.Property<string>("ProductidProduct")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("ExportFormid");

                    b.HasIndex("ProductidProduct");

                    b.ToTable("ItemEplists");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.ItemIplists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnName("count");

                    b.Property<string>("IdIpForm")
                        .IsRequired()
                        .HasColumnName("idIpForm")
                        .HasMaxLength(10);

                    b.Property<string>("IdProduct")
                        .IsRequired()
                        .HasColumnName("idProduct")
                        .HasMaxLength(10);

                    b.Property<string>("ImportFormid")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.HasIndex("ImportFormid");

                    b.ToTable("ItemIplists");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.ItemOrderLists", b =>
                {
                    b.Property<string>("IdList")
                        .HasColumnName("idList")
                        .HasMaxLength(10);

                    b.Property<int>("AvgRate")
                        .HasColumnName("avgRate");

                    b.Property<int>("Count")
                        .HasColumnName("count");

                    b.Property<string>("IdOrder")
                        .IsRequired()
                        .HasColumnName("idOrder")
                        .HasMaxLength(10);

                    b.Property<string>("IdProduct")
                        .IsRequired()
                        .HasColumnName("idProduct")
                        .HasMaxLength(10);

                    b.HasKey("IdList");

                    b.HasIndex("IdOrder");

                    b.HasIndex("IdProduct");

                    b.ToTable("ItemOrderLists");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.LinkImgStores", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasMaxLength(10);

                    b.Property<string>("CustomeridCustomer")
                        .HasMaxLength(10);

                    b.Property<string>("IdMerchant")
                        .HasColumnName("idMerchant")
                        .HasMaxLength(10);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnName("path");

                    b.HasKey("Id");

                    b.HasIndex("CustomeridCustomer");

                    b.HasIndex("IdMerchant");

                    b.ToTable("Link_ImgStores");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Merchants", b =>
                {
                    b.Property<string>("IdMerchant")
                        .HasColumnName("idMerchant")
                        .HasMaxLength(10);

                    b.Property<string>("Fstname")
                        .IsRequired()
                        .HasColumnName("fstname")
                        .HasMaxLength(20);

                    b.Property<string>("Lstname")
                        .IsRequired()
                        .HasColumnName("lstname")
                        .HasMaxLength(20);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone");

                    b.Property<string>("Storename")
                        .IsRequired()
                        .HasColumnName("storename")
                        .HasMaxLength(60);

                    b.Property<string>("Website")
                        .HasColumnName("website");

                    b.HasKey("IdMerchant");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Orders", b =>
                {
                    b.Property<string>("IdOrder")
                        .HasColumnName("idOrder")
                        .HasMaxLength(10);

                    b.Property<string>("AccountidAccount")
                        .HasMaxLength(10);

                    b.Property<string>("Addressid");

                    b.Property<int?>("BillStateidState");

                    b.Property<DateTime>("CreatDate")
                        .HasColumnName("creat_date");

                    b.Property<string>("IdBuyAcc")
                        .IsRequired()
                        .HasColumnName("idBuyAcc")
                        .HasMaxLength(10);

                    b.Property<string>("IdSaleAcc")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("IdStt")
                        .HasColumnName("idStt");

                    b.Property<double>("Total")
                        .HasColumnName("total");

                    b.HasKey("IdOrder");

                    b.HasIndex("AccountidAccount");

                    b.HasIndex("Addressid");

                    b.HasIndex("BillStateidState");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Position", b =>
                {
                    b.Property<int>("IdPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idPosition")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Height")
                        .HasColumnName("height");

                    b.Property<float>("Width")
                        .HasColumnName("width");

                    b.HasKey("IdPosition");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Posts", b =>
                {
                    b.Property<string>("IdPost")
                        .HasColumnName("idPost")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnName("create_date");

                    b.Property<int>("CurRank")
                        .HasColumnName("curRank");

                    b.Property<string>("IdAcc")
                        .IsRequired()
                        .HasColumnName("idAcc");

                    b.HasKey("IdPost");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.ProductDetails", b =>
                {
                    b.Property<string>("IdproductDetail")
                        .HasColumnName("idproductDetail")
                        .HasMaxLength(10);

                    b.Property<string>("AccountidAccount")
                        .HasMaxLength(10);

                    b.Property<int>("Count")
                        .HasColumnName("count");

                    b.Property<DateTime>("CreatDate")
                        .HasColumnName("creat_date");

                    b.Property<float>("Fee")
                        .HasColumnName("fee");

                    b.Property<string>("IdAcc")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("IdProduct")
                        .IsRequired()
                        .HasColumnName("idProduct")
                        .HasMaxLength(10);

                    b.Property<string>("IdRepository")
                        .HasMaxLength(10);

                    b.Property<double>("Price")
                        .HasColumnName("price");

                    b.HasKey("IdproductDetail");

                    b.HasIndex("AccountidAccount");

                    b.HasIndex("IdProduct")
                        .IsUnique();

                    b.HasIndex("IdRepository");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Products", b =>
                {
                    b.Property<string>("IdProduct")
                        .HasColumnName("idProduct")
                        .HasMaxLength(10);

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasMaxLength(20);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<string>("IdCategory")
                        .IsRequired()
                        .HasColumnName("idCategory")
                        .HasMaxLength(10);

                    b.Property<string>("NameProduct")
                        .HasColumnName("nameProduct");

                    b.HasKey("IdProduct");

                    b.HasIndex("IdCategory");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Ratings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cmt")
                        .IsRequired();

                    b.Property<int>("IdItemOrderList")
                        .HasColumnName("idItemOrderList");

                    b.Property<string>("ItemOrderListidList")
                        .HasMaxLength(10);

                    b.Property<int>("RateValue")
                        .HasColumnName("rateValue");

                    b.HasKey("Id");

                    b.HasIndex("ItemOrderListidList");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Repositories", b =>
                {
                    b.Property<string>("IdRepository")
                        .HasColumnName("idRepository")
                        .HasMaxLength(10);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<int>("Stt");

                    b.HasKey("IdRepository");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Shows", b =>
                {
                    b.Property<string>("IdShow")
                        .HasColumnName("idShow")
                        .HasMaxLength(10);

                    b.Property<string>("IdPost")
                        .IsRequired()
                        .HasColumnName("idPost")
                        .HasMaxLength(10);

                    b.Property<string>("IdProduct")
                        .IsRequired()
                        .HasColumnName("idProduct")
                        .HasMaxLength(10);

                    b.Property<string>("Intro");

                    b.HasKey("IdShow");

                    b.HasIndex("IdPost");

                    b.HasIndex("IdProduct");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Accounts", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.Customers", "IdCustomerNavigation")
                        .WithMany("Accounts")
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShoeEcommerce.Model.Models.Merchants", "IdMerchantNavigation")
                        .WithMany("Accounts")
                        .HasForeignKey("IdMerchant")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Addresses", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.Addresses", "Address")
                        .WithMany("InverseAddress")
                        .HasForeignKey("Addressid");

                    b.HasOne("ShoeEcommerce.Model.Models.Accounts", "IdAccountNavigation")
                        .WithMany("Addresses")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Advertisements", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.Accounts", "IdAccountNavigation")
                        .WithMany("Advertisements")
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShoeEcommerce.Model.Models.Position", "PositionidPositionNavigation")
                        .WithMany("Advertisements")
                        .HasForeignKey("PositionidPosition");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Emails", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.Addresses", "Address")
                        .WithMany("Emails")
                        .HasForeignKey("Addressid");

                    b.HasOne("ShoeEcommerce.Model.Models.Accounts", "IdAccountNavigation")
                        .WithMany("Emails")
                        .HasForeignKey("IdAccount");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.ExportForms", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.Repositories", "IdRepositoryNavigation")
                        .WithMany("ExportForms")
                        .HasForeignKey("IdRepository")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.HistorySearches", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.Accounts", "AccountidAccountNavigation")
                        .WithMany("HistorySearches")
                        .HasForeignKey("AccountidAccount");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.ImageProducts", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.ProductDetails", "ProductDetailidproductDetailNavigation")
                        .WithMany("ImageProducts")
                        .HasForeignKey("ProductDetailidproductDetail");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.ImportForms", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.Repositories", "IdRepositoryNavigation")
                        .WithMany("ImportForms")
                        .HasForeignKey("IdRepository")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.ItemEplists", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.ExportForms", "ExportForm")
                        .WithMany("ItemEplists")
                        .HasForeignKey("ExportFormid");

                    b.HasOne("ShoeEcommerce.Model.Models.Products", "ProductidProductNavigation")
                        .WithMany("ItemEplists")
                        .HasForeignKey("ProductidProduct");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.ItemIplists", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.Products", "IdProductNavigation")
                        .WithMany("ItemIplists")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShoeEcommerce.Model.Models.ImportForms", "ImportForm")
                        .WithMany("ItemIplists")
                        .HasForeignKey("ImportFormid");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.ItemOrderLists", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.Orders", "IdOrderNavigation")
                        .WithMany("ItemOrderLists")
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShoeEcommerce.Model.Models.Products", "IdProductNavigation")
                        .WithMany("ItemOrderLists")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.LinkImgStores", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.Customers", "CustomeridCustomerNavigation")
                        .WithMany("LinkImgStores")
                        .HasForeignKey("CustomeridCustomer");

                    b.HasOne("ShoeEcommerce.Model.Models.Merchants", "IdMerchantNavigation")
                        .WithMany("LinkImgStores")
                        .HasForeignKey("IdMerchant");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Orders", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.Accounts", "AccountidAccountNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("AccountidAccount");

                    b.HasOne("ShoeEcommerce.Model.Models.Addresses", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("Addressid");

                    b.HasOne("ShoeEcommerce.Model.Models.BillStates", "BillStateidStateNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("BillStateidState");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.ProductDetails", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.Accounts", "AccountidAccountNavigation")
                        .WithMany("ProductDetails")
                        .HasForeignKey("AccountidAccount");

                    b.HasOne("ShoeEcommerce.Model.Models.Products", "IdProductNavigation")
                        .WithOne("ProductDetails")
                        .HasForeignKey("ShoeEcommerce.Model.Models.ProductDetails", "IdProduct")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShoeEcommerce.Model.Models.Repositories", "IdRepositoryNavigation")
                        .WithMany("ProductDetails")
                        .HasForeignKey("IdRepository");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Products", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.Categories", "IdCategoryNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Ratings", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.ItemOrderLists", "ItemOrderListidListNavigation")
                        .WithMany("Ratings")
                        .HasForeignKey("ItemOrderListidList");
                });

            modelBuilder.Entity("ShoeEcommerce.Model.Models.Shows", b =>
                {
                    b.HasOne("ShoeEcommerce.Model.Models.Posts", "IdPostNavigation")
                        .WithMany("Shows")
                        .HasForeignKey("IdPost")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShoeEcommerce.Model.Models.Products", "IdProductNavigation")
                        .WithMany("Shows")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
